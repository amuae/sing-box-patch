--- a/provider/remote.go
+++ b/provider/remote.go
@@ -89,6 +89,11 @@ func (p *RemoteProvider) Start() error {
 		return E.Cause(err, "create HTTP client")
 	}
 
+	// 添加启动状态检查
+	if p.tag == "" {
+		return E.New("provider tag cannot be empty")
+	}
+
 	// 立即更新一次
 	err = p.updateOutbounds()
 	if err != nil {
@@ -115,6 +120,11 @@ func (p *RemoteProvider) updateOutbounds() error {
 		return E.Cause(err, "request subscription")
 	}
 	defer resp.Body.Close()
+	
+	// 检查响应状态
+	if resp.StatusCode >= 400 {
+		return E.New("subscription request failed: HTTP ", resp.StatusCode)
+	}
 
 	content, err := io.ReadAll(resp.Body)
 	if err != nil {
@@ -124,6 +134,11 @@ func (p *RemoteProvider) updateOutbounds() error {
 	if len(content) == 0 {
 		return E.New("empty subscription content")
 	}
+	
+	// 检查内容格式
+	contentStr := string(content)
+	if len(contentStr) < 10 {
+		return E.New("subscription content too short, possible error response")
+	}
 
 	// 解析节点
 	outbounds, err := ParseSubscription(p.ctx, contentStr)
@@ -131,6 +146,11 @@ func (p *RemoteProvider) updateOutbounds() error {
 		return E.Cause(err, "parse subscription")
 	}
 
+	// 检查解析结果
+	if len(outbounds) == 0 {
+		return E.New("no valid outbounds parsed from subscription")
+	}
+
 	// 应用过滤器
 	filtered := p.applyFilters(outbounds)
 	if len(filtered) == 0 {