name: Build sing-box with Provider Support

on:
  workflow_dispatch:
    inputs:
      upstream_repo:
        description: '上游仓库 (默认: SagerNet/sing-box)'
        required: false
        default: 'SagerNet/sing-box'
        type: string
      upstream_ref:
        description: '上游分支或标签 (默认: dev-next)'
        required: false
        default: 'dev-next'
        type: string
      version_suffix:
        description: '版本后缀 (默认: -provider)'
        required: false
        default: '-provider'
        type: string
      build_platforms:
        description: '构建平台'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - linux-amd64
          - linux-arm64
          - windows-amd64
          - android-arm64

env:
  GO_VERSION: '1.23.1'

permissions:
  contents: write

jobs:
  prepare:
    name: 准备源码和应用补丁
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      commit: ${{ steps.prepare.outputs.commit }}
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: 检出当前仓库 (补丁仓库)
        uses: actions/checkout@v4
        with:
          path: 'patches-repo'
          
      - name: 检出上游仓库
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.upstream_repo || 'SagerNet/sing-box' }}
          ref: ${{ github.event.inputs.upstream_ref || 'dev-next' }}
          path: 'upstream'
          fetch-depth: 0
          
      - name: 设置Go环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: 获取版本信息
        id: version
        run: |
          cd upstream
          
          # 尝试获取版本信息
          if [ -f cmd/internal/read_tag/main.go ]; then
            VERSION=$(go run ./cmd/internal/read_tag --ci --nightly 2>/dev/null || echo "")
          fi
          
          # 如果获取失败，构造版本号
          if [ -z "$VERSION" ]; then
            BRANCH="${{ github.event.inputs.upstream_ref || 'dev-next' }}"
            COMMIT=$(git rev-parse --short HEAD)
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            VERSION="${BRANCH}-${COMMIT}-${TIMESTAMP}"
          fi
          
          VERSION="${VERSION}${{ github.event.inputs.version_suffix || '-provider' }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📋 生成版本号: $VERSION"
          
      - name: 应用Provider补丁
        id: prepare
        run: |
          cd upstream
          COMMIT=$(git rev-parse HEAD)
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "📋 上游提交: $COMMIT"
          
          # 复制补丁脚本
          cp ../patches-repo/apply-patches.sh ./
          cp -r ../patches-repo/patches ./
          
          # 应用补丁
          echo "🔧 应用Provider支持补丁..."
          chmod +x apply-patches.sh
          ./apply-patches.sh
          
          # 验证关键文件是否存在
          echo "🔍 验证补丁应用结果..."
          if [ -f adapter/provider.go ]; then
            echo "✅ adapter/provider.go 存在"
          else
            echo "❌ adapter/provider.go 不存在"
            exit 1
          fi
          
          if [ -d provider ]; then
            echo "✅ provider/ 目录存在"
            echo "📁 Provider文件: $(find provider -name "*.go" | wc -l) 个"
          else
            echo "❌ provider/ 目录不存在"
            exit 1
          fi
          
          echo "🎉 补丁应用完成!"
          
      - name: 生成构建矩阵
        id: matrix
        run: |
          PLATFORMS="${{ github.event.inputs.build_platforms || 'all' }}"
          
          if [ "$PLATFORMS" = "all" ]; then
            MATRIX='[
              {"name": "linux-amd64", "os": "linux", "arch": "amd64"},
              {"name": "linux-arm64", "os": "linux", "arch": "arm64"},
              {"name": "windows-amd64", "os": "windows", "arch": "amd64"},
              {"name": "android-arm64", "os": "android", "arch": "arm64", "ndk": "aarch64-linux-android21"}
            ]'
          else
            case "$PLATFORMS" in
              "linux-amd64")
                MATRIX='[{"name": "linux-amd64", "os": "linux", "arch": "amd64"}]'
                ;;
              "linux-arm64")
                MATRIX='[{"name": "linux-arm64", "os": "linux", "arch": "arm64"}]'
                ;;
              "windows-amd64")
                MATRIX='[{"name": "windows-amd64", "os": "windows", "arch": "amd64"}]'
                ;;
              "android-arm64")
                MATRIX='[{"name": "android-arm64", "os": "android", "arch": "arm64", "ndk": "aarch64-linux-android21"}]'
                ;;
            esac
          fi
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "📋 构建矩阵: $MATRIX"
          
      - name: 上传准备好的源码
        uses: actions/upload-artifact@v4
        with:
          name: prepared-source
          path: upstream/
          retention-days: 1

  build:
    name: 构建 ${{ matrix.platform.name }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: 设置Go环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: 下载准备好的源码
        uses: actions/download-artifact@v4
        with:
          name: prepared-source
          path: ./
          
      - name: 设置Android NDK
        if: matrix.platform.os == 'android'
        run: |
          # 安装Android NDK
          sudo apt-get update -qq
          sudo apt-get install -y wget unzip
          
          # 下载并安装NDK
          NDK_VERSION="r25c"
          wget -q https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux.zip
          unzip -q android-ndk-${NDK_VERSION}-linux.zip
          export ANDROID_NDK_ROOT="$(pwd)/android-ndk-${NDK_VERSION}"
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
          echo "NDK_CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.platform.ndk }}-clang" >> $GITHUB_ENV
          
      - name: 构建二进制文件
        run: |
          set -euo pipefail
          
          # 构建标签
          BUILD_TAGS="with_gvisor,with_quic,with_dhcp,with_wireguard,with_utls,with_acme,with_clash_api,with_tailscale"
          
          # 版本信息
          VERSION="${{ needs.prepare.outputs.version }}"
          LDFLAGS="-s -w -buildid= -X github.com/sagernet/sing-box/constant.Version=$VERSION"
          
          mkdir -p dist
          
          echo "🔨 开始构建 ${{ matrix.platform.name }}..."
          
          if [ "${{ matrix.platform.os }}" = "android" ]; then
            # Android构建
            export CGO_ENABLED=1
            export CC="${{ env.NDK_CC }}"
            export CXX="${{ env.NDK_CC }}++"
            export GOOS=android
            export GOARCH=${{ matrix.platform.arch }}
            
            echo "📱 Android构建配置:"
            echo "   CC: $CC"
            echo "   GOOS: $GOOS"
            echo "   GOARCH: $GOARCH"
            
            go build -v -trimpath -ldflags "$LDFLAGS" -tags "$BUILD_TAGS" \
              -o dist/sing-box ./cmd/sing-box
          else
            # 其他平台构建
            export CGO_ENABLED=0
            export GOOS=${{ matrix.platform.os }}
            export GOARCH=${{ matrix.platform.arch }}
            
            echo "🖥️ ${{ matrix.platform.os }}构建配置:"
            echo "   GOOS: $GOOS"
            echo "   GOARCH: $GOARCH"
            
            go build -v -trimpath -ldflags "$LDFLAGS" -tags "$BUILD_TAGS" \
              -o dist/sing-box ./cmd/sing-box
          fi
          
          # 验证构建结果
          if [ -f dist/sing-box ]; then
            echo "✅ 构建成功"
            ls -la dist/sing-box
            file dist/sing-box || true
          else
            echo "❌ 构建失败"
            exit 1
          fi
          
      - name: 打包二进制文件
        run: |
          cd dist
          
          # 创建发布包
          PACKAGE_NAME="sing-box-${{ needs.prepare.outputs.version }}-${{ matrix.platform.name }}"
          mkdir -p "$PACKAGE_NAME"
          
          # 复制二进制文件
          if [ "${{ matrix.platform.os }}" = "windows" ]; then
            cp sing-box "$PACKAGE_NAME/sing-box.exe"
          else
            cp sing-box "$PACKAGE_NAME/"
          fi
          
          # 复制许可证
          if [ -f ../LICENSE ]; then
            cp ../LICENSE "$PACKAGE_NAME/"
          fi
          
          # 创建README
          cat > "$PACKAGE_NAME/README.md" << EOF
          # sing-box with Provider Support
          
          Version: ${{ needs.prepare.outputs.version }}
          Platform: ${{ matrix.platform.name }}
          Build Date: $(date -u)
          
          ## Features
          - Remote subscription provider
          - Local file provider  
          - Inline provider
          - Health check and auto-update
          - Enhanced selector/urltest groups
          
          ## Usage
          ./sing-box run -c config.json
          EOF
          
          # 创建压缩包
          if [ "${{ matrix.platform.os }}" = "windows" ]; then
            zip -r "${PACKAGE_NAME}.zip" "$PACKAGE_NAME"
            rm -rf "$PACKAGE_NAME"
            echo "📦 创建: ${PACKAGE_NAME}.zip"
          else
            tar -czvf "${PACKAGE_NAME}.tar.gz" "$PACKAGE_NAME"
            rm -rf "$PACKAGE_NAME"
            echo "📦 创建: ${PACKAGE_NAME}.tar.gz"
          fi
          
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform.name }}
          path: dist/*.tar.gz dist/*.zip
          if-no-files-found: error

  release:
    name: 创建Release
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: success()
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: 整理发布文件
        run: |
          mkdir -p release
          find artifacts -name "*.tar.gz" -o -name "*.zip" | while read -r file; do
            cp "$file" release/
          done
          
          echo "📦 发布文件:"
          ls -la release/
          
      - name: 生成发布说明
        run: |
          cat > release_notes.md << EOF
          ## 🚀 sing-box with Provider Support
          
          ### 📋 构建信息
          - **版本**: \`${{ needs.prepare.outputs.version }}\`
          - **上游仓库**: \`${{ github.event.inputs.upstream_repo || 'SagerNet/sing-box' }}\`
          - **分支/标签**: \`${{ github.event.inputs.upstream_ref || 'dev-next' }}\`
          - **提交**: \`${{ needs.prepare.outputs.commit }}\`
          - **构建时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ### 🔧 增强功能
          - ✅ **Provider支持**: 远程/本地/内联提供商
          - ✅ **健康监控**: 自动节点健康检查
          - ✅ **自动更新**: 定时订阅更新
          - ✅ **增强组**: 支持Provider的Selector/URLTest组
          - ✅ **配置扩展**: 扩展选项和验证
          
          ### 📦 可用平台
          - **Linux**: AMD64, ARM64
          - **Windows**: AMD64
          - **Android**: ARM64
          
          ### 🛠️ 构建配置
          - **Go版本**: ${{ env.GO_VERSION }}
          - **构建标签**: \`with_gvisor,with_quic,with_dhcp,with_wireguard,with_utls,with_acme,with_clash_api,with_tailscale\`
          - **优化**: 压缩二进制文件，去除调试信息
          
          ### 📚 使用说明
          下载对应平台的压缩包，解压后即可使用。
          
          ---
          > 🤖 **自动构建**  
          > 此发布版本基于上游源码自动构建，集成了Provider支持功能。
          EOF
          
      - name: 创建Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          name: "sing-box ${{ needs.prepare.outputs.version }}"
          body_path: release_notes.md
          files: release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: 清理环境
    runs-on: ubuntu-latest
    needs: [prepare, build, release]
    if: always()
    steps:
      - name: 清理Artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            prepared-source
            build-linux-amd64
            build-linux-arm64
            build-windows-amd64
            build-android-arm64
          failOnError: false
          
      - name: 构建总结
        run: |
          echo "## 🎉 构建流程完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 构建详情" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **上游**: ${{ github.event.inputs.upstream_repo || 'SagerNet/sing-box' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **分支**: ${{ github.event.inputs.upstream_ref || 'dev-next' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **平台**: ${{ github.event.inputs.build_platforms || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 快速链接" >> $GITHUB_STEP_SUMMARY
          echo "- [📦 Release页面](https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [🔧 Provider文档](https://github.com/${{ github.repository }}#provider-support)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **环境已清理，构建产物已保存到Release**" >> $GITHUB_STEP_SUMMARY